{
  
    
        "post0": {
            "title": "10 Insights from “Psychology and the Good Life”",
            "content": "&#8220;Psychology and the Good Life&#8221; by Laurie Santos . In this video, Laurie Santos talked about her class &quot;Psychology and the Good Life&quot;. Laurie Santos is a professor at Yale and she thought that instead of only teaching how human minds work, she needed to teach students how to implement the new knowledge to make their lives happier. So she made the class, &quot;Psychology and the Good Life&quot;, and in her talk she summed up the class with ten insights. . Insight #1: We can change our well-being . There is a common misconception that we are stuck in the current well-being we are in, but that is false. We are able to improve our happiness ourselves. From a study by Sonja Lyubomirsky, a psychologist, found that about 50% of our well-being is affected by our genes. This means that the other 50% can be affected by our own doing. . Insight #2: Material and temporary joy does not affect one&#39;s happiness in the long-term . When people want to get happier, they believe that they must get rid of the bad things in their life or get more money from their jobs. Though this does slightly affect one&#39;s well-being, it only affects at most 10% of it. Found in a study by Sonja Lyubomirsky, behaviors and willingness to change is what takes the most effect on one&#39;s well-being. . Insight #3: Bringing your self is the hardest part of changing your well-being . Taking control of your flow of life is the hardest part of becoming happy. Just learning about psychology won&#39;t help you become happy, you must put it into practice. For example to become fit, one must workout regularly and consistently to observe results. Same with your well-being, one must make a change that is consistently affecting your life for the better. . Insight #4: Realize that your intuition is lying to yourself about how to become happy . Your mind is not telling you what you need to become happy. To become happy, one must realize that their mind is not telling the truth. Your mind tells you that you need more material possessions to be happy, but this is false because one you get those items, you just want more. . Insight #5: Social connections are key for happiness . Nick Eppley and his colleagues at Chicago Business School conducted a study asking people on the subway to stay in a solitary state, a state where one must talk to another the whole ride, or do what ever they want. According to the study, the people who made social connections felt happier than before and those who were solitary felt worse. . Insight #6: Helping others can also improve happiness . Elizabeth Dunn and others from the University of British Columbia had a study where people were given 5 or 20 dollars and were given a change to treat themselves or someone else. At the end of the study, those who helped others out felt better and felt happier. The result also showed that the amount of money did not affect the helper&#39;s happiness because they felt happy to even help someone else. . Insight #7: Make time to be gratuitous everyday . Taking time to be thankful about something everyday can improve one&#39;s happiness. Just writing a small note about what you are grateful for can bump up your happiness and well-being. It keeps your mind on positivity instead of negativity and it is good for your well-being. . Insight #8: Improving physical heath can also improve mental health . Things like exercising and getting enough hours of sleep are not only good for your physical health but it is good for your mental health as well. Doing healthy practices does more than just good for your body but also your mind, well-being, and mood. . Insight #9: Be present in the moment . Taking time to realize what you are doing and focusing is important for your well-being. People tend to just go through the motions and rush through the day trying to get everything done, but taking a moment to really comprehend what is going on in your day can bump up your well-being. . Insight #10: Become wealthy with time . People who prioritize the amount of time they have are more happy than those who would sacrifice their time to get money. Taking a break from doing work is great for your well-being. . Gratitude Note . What I wrote to my friend Leo. . Leo you are a terrific person, you are very hard working both in school and in FTC. Also, you are a great friend because you help me when I need it. . Leo&#39;s response . Learning . Learning is a large part of a student&#39;s life. Almost every single class a student will take requires some proof that they learnt something. Some ways to help a student learn are by focusing on their work and practice good learning habits. Like in Laurie Santos&#39;s talk, we need to value our time. If we value our time we become rich in time and it lets us improve out mental well-being. We can value our time by doing many things. For example we can use our time effectively by focusing and finishing our work in a timely manner and not rushing it all last minute. Also, in adherence to Laurie Santos&#39;s talk we should take control and practice good habits. These good habits are like working hard when you are given a chance to relieve the stress of the workload. These things would not only help you proceed in your class but it would help you well-being because it would minimize the size of your homework at home. This would let you sleep earlier and improve your mental health. Another way to help students learn is by taking notes on important terms, ideas of vocab. .",
            "url": "https://kaiden-dough.github.io/fastpages/jupyter/2022/08/27/psychology.html",
            "relUrl": "/jupyter/2022/08/27/psychology.html",
            "date": " • Aug 27, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "My Personal Coding Journey",
            "content": "Scratch . As a young child I took a few Scratch classes that got my acquainted with programming. These classes taught me the basics of programming and it kind of sparked my interest for robotics and engineering. In these classes I found out about simple things like if loops to make a Scratch maze. . FLL . Later in my life I joined a FLL team. FLL or FIRST LEGO League is a robotics competition where teams would build a small robot that would complete tasks in order to earn points. We also had to program the robot using block code. The code I learned was how to create a line following robot or a robot that would detect its surroundings and execute an action. . FTC . In 8th grade I joined a FTC team. FTC or FIRST Tech Challenge is the larger version of FLL. This is a competition where teams would build a robot that is about 1.5ft by 1.5 ft large and they would code it run autonomously and with a controller. Teams would earn points from doing different actions in the game. During this time, I learned mostly about building robots and touched a little bit of coding the robot. . Youtube Java Tutorials . During the summer of 2022 I watched many YouTube tutorials to further my knowledge of code. I watched tutorials on Java and created a couple projects. I made a calculator that allows the user to add, subtract, multiply, or divide numbers until they want to stop and the program would print the total result. Also I began on a Blackjack program and I only made it so the player could play by themselves. . APCSP . Now I am in APCSP and I am learning how to use many new things. I am learning Python, how to use GitHub, how to code in Jupyter notebooks, and in Markdown. .",
            "url": "https://kaiden-dough.github.io/fastpages/jupyter/2022/08/27/mycodingjourney.html",
            "relUrl": "/jupyter/2022/08/27/mycodingjourney.html",
            "date": " • Aug 27, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "My Class and Goals",
            "content": "Trimester 1 . AP Physics Mechanics - Period 1 . This course will bring students to have a strong understanding of Newtonian mechanics and be well versed in performing and analyzing laboratory experiments. . In this class, I plan to achieve A&#39;s all trimesters and attempt to get a 5 on the AP exam. Also, I want to learn more about physics. . United States History - Period 2 . In this course, students will complete a survey of United States History from the writing of the Constitution through the Great Depression. . In this class, I desire A&#39;s in the two trimesters I take it. I also want to learn more about the history of the United States. . AP Computer Science Principles - Period 3 . The goals I have for APCSP is to increase my ability and knowledge about computer science. I also want to get A&#39;s and a 5 in the AP exam. . AP Calculus BC - Period 4 . In this class, students will create deeper connections with algebra, geometry, functions, and technology. Also, students will build upon their previous knowledge of calculus. . The goals I have for this class is to get a 5 on the AP exam and to get all A&#39;s. I also want to increase my knowledge in mathematics. . AP English Language - Period 5 . In this class, students will focus on the study of rhetoric, the art of effective communication. Students will have numerous opportunities to analyze the strategies of accomplished writers so that they can improve their own abilities to communicate effectively. . In this class, I want to increase my ability to write effectively and get all A&#39;s and a 5 on the AP exam. . Trimester 2 . TBD . Trimester 3 . TBD .",
            "url": "https://kaiden-dough.github.io/fastpages/jupyter/2022/08/27/myclassesandgoals.html",
            "relUrl": "/jupyter/2022/08/27/myclassesandgoals.html",
            "date": " • Aug 27, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "Bash Tool Installation Checks",
            "content": "Python Checks . python --version python2 --version . Python 3.9.12 Python 2.7.18 . Conda Packages . conda list . # packages in environment at /home/kaiden_do/anaconda3: # # Name Version Build Channel _ipyw_jlab_nb_ext_conf 0.1.0 py39h06a4308_1 _libgcc_mutex 0.1 main _openmp_mutex 4.5 1_gnu aiohttp 3.8.1 py39h7f8727e_1 aiosignal 1.2.0 pyhd3eb1b0_0 alabaster 0.7.12 pyhd3eb1b0_0 anaconda 2022.05 py39_0 anaconda-client 1.9.0 py39h06a4308_0 anaconda-navigator 2.1.4 py39h06a4308_0 anaconda-project 0.10.2 pyhd3eb1b0_0 anyio 3.5.0 py39h06a4308_0 appdirs 1.4.4 pyhd3eb1b0_0 argon2-cffi 21.3.0 pyhd3eb1b0_0 argon2-cffi-bindings 21.2.0 py39h7f8727e_0 arrow 1.2.2 pyhd3eb1b0_0 astroid 2.6.6 py39h06a4308_0 astropy 5.0.4 py39hce1f21e_0 asttokens 2.0.5 pyhd3eb1b0_0 async-timeout 4.0.1 pyhd3eb1b0_0 atomicwrites 1.4.0 py_0 attrs 21.4.0 pyhd3eb1b0_0 automat 20.2.0 py_0 autopep8 1.6.0 pyhd3eb1b0_0 babel 2.9.1 pyhd3eb1b0_0 backcall 0.2.0 pyhd3eb1b0_0 backports 1.1 pyhd3eb1b0_0 backports.functools_lru_cache 1.6.4 pyhd3eb1b0_0 backports.tempfile 1.0 pyhd3eb1b0_1 backports.weakref 1.0.post1 py_1 bash-kernel 0.7.2 pypi_0 pypi bcrypt 3.2.0 py39he8ac12f_0 beautifulsoup4 4.11.1 py39h06a4308_0 binaryornot 0.4.4 pyhd3eb1b0_1 bitarray 2.4.1 py39h7f8727e_0 bkcharts 0.2 py39h06a4308_0 black 19.10b0 py_0 blas 1.0 mkl bleach 4.1.0 pyhd3eb1b0_0 blosc 1.21.0 h8c45485_0 bokeh 2.4.2 py39h06a4308_0 boto3 1.21.32 pyhd3eb1b0_0 botocore 1.24.32 pyhd3eb1b0_0 bottleneck 1.3.4 py39hce1f21e_0 brotli 1.0.9 he6710b0_2 brotlipy 0.7.0 py39h27cfd23_1003 brunsli 0.1 h2531618_0 bzip2 1.0.8 h7b6447c_0 c-ares 1.18.1 h7f8727e_0 ca-certificates 2022.3.29 h06a4308_1 cachetools 4.2.2 pyhd3eb1b0_0 certifi 2021.10.8 py39h06a4308_2 cffi 1.15.0 py39hd667e15_1 cfitsio 3.470 hf0d0db6_6 chardet 4.0.0 py39h06a4308_1003 charls 2.2.0 h2531618_0 charset-normalizer 2.0.4 pyhd3eb1b0_0 click 8.0.4 py39h06a4308_0 cloudpickle 2.0.0 pyhd3eb1b0_0 clyent 1.2.2 py39h06a4308_1 colorama 0.4.4 pyhd3eb1b0_0 colorcet 2.0.6 pyhd3eb1b0_0 conda 4.13.0 py39h06a4308_0 conda-build 3.21.8 py39h06a4308_2 conda-content-trust 0.1.1 pyhd3eb1b0_0 conda-env 2.6.0 1 conda-pack 0.6.0 pyhd3eb1b0_0 conda-package-handling 1.8.1 py39h7f8727e_0 conda-repo-cli 1.0.4 pyhd3eb1b0_0 conda-token 0.3.0 pyhd3eb1b0_0 conda-verify 3.4.2 py_1 constantly 15.1.0 pyh2b92418_0 cookiecutter 1.7.3 pyhd3eb1b0_0 cryptography 3.4.8 py39hd23ed53_0 cssselect 1.1.0 pyhd3eb1b0_0 curl 7.82.0 h7f8727e_0 cycler 0.11.0 pyhd3eb1b0_0 cython 0.29.28 py39h295c915_0 cytoolz 0.11.0 py39h27cfd23_0 daal4py 2021.5.0 py39h78b71dc_0 dal 2021.5.1 h06a4308_803 dask 2022.2.1 pyhd3eb1b0_0 dask-core 2022.2.1 pyhd3eb1b0_0 dataclasses 0.8 pyh6d0b6a4_7 datashader 0.13.0 pyhd3eb1b0_1 datashape 0.5.4 py39h06a4308_1 dbus 1.13.18 hb2f20db_0 debugpy 1.5.1 py39h295c915_0 decorator 5.1.1 pyhd3eb1b0_0 defusedxml 0.7.1 pyhd3eb1b0_0 diff-match-patch 20200713 pyhd3eb1b0_0 distributed 2022.2.1 pyhd3eb1b0_0 docutils 0.17.1 py39h06a4308_1 entrypoints 0.4 py39h06a4308_0 et_xmlfile 1.1.0 py39h06a4308_0 executing 0.8.3 pyhd3eb1b0_0 expat 2.4.4 h295c915_0 filelock 3.6.0 pyhd3eb1b0_0 flake8 3.9.2 pyhd3eb1b0_0 flask 1.1.2 pyhd3eb1b0_0 fontconfig 2.13.1 h6c09931_0 fonttools 4.25.0 pyhd3eb1b0_0 freetype 2.11.0 h70c0345_0 frozenlist 1.2.0 py39h7f8727e_0 fsspec 2022.2.0 pyhd3eb1b0_0 future 0.18.2 py39h06a4308_1 gensim 4.1.2 py39h295c915_0 giflib 5.2.1 h7b6447c_0 glib 2.69.1 h4ff587b_1 glob2 0.7 pyhd3eb1b0_0 gmp 6.2.1 h2531618_2 gmpy2 2.1.2 py39heeb90bb_0 google-api-core 1.25.1 pyhd3eb1b0_0 google-auth 1.33.0 pyhd3eb1b0_0 google-cloud-core 1.7.1 pyhd3eb1b0_0 google-cloud-storage 1.31.0 py_0 google-crc32c 1.1.2 py39h27cfd23_0 google-resumable-media 1.3.1 pyhd3eb1b0_1 googleapis-common-protos 1.53.0 py39h06a4308_0 greenlet 1.1.1 py39h295c915_0 grpcio 1.42.0 py39hce63b2e_0 gst-plugins-base 1.14.0 h8213a91_2 gstreamer 1.14.0 h28cd5cc_2 h5py 3.6.0 py39ha0f2276_0 hdf5 1.10.6 hb1b8bf9_0 heapdict 1.0.1 pyhd3eb1b0_0 holoviews 1.14.8 pyhd3eb1b0_0 hvplot 0.7.3 pyhd3eb1b0_1 hyperlink 21.0.0 pyhd3eb1b0_0 icu 58.2 he6710b0_3 idna 3.3 pyhd3eb1b0_0 imagecodecs 2021.8.26 py39h4cda21f_0 imageio 2.9.0 pyhd3eb1b0_0 imagesize 1.3.0 pyhd3eb1b0_0 importlib-metadata 4.11.3 py39h06a4308_0 importlib_metadata 4.11.3 hd3eb1b0_0 incremental 21.3.0 pyhd3eb1b0_0 inflection 0.5.1 py39h06a4308_0 iniconfig 1.1.1 pyhd3eb1b0_0 intake 0.6.5 pyhd3eb1b0_0 intel-openmp 2021.4.0 h06a4308_3561 intervaltree 3.1.0 pyhd3eb1b0_0 ipykernel 6.9.1 py39h06a4308_0 ipython 8.2.0 py39h06a4308_0 ipython_genutils 0.2.0 pyhd3eb1b0_1 ipywidgets 7.6.5 pyhd3eb1b0_1 isort 5.9.3 pyhd3eb1b0_0 itemadapter 0.3.0 pyhd3eb1b0_0 itemloaders 1.0.4 pyhd3eb1b0_1 itsdangerous 2.0.1 pyhd3eb1b0_0 jdcal 1.4.1 pyhd3eb1b0_0 jedi 0.18.1 py39h06a4308_1 jeepney 0.7.1 pyhd3eb1b0_0 jinja2 2.11.3 pyhd3eb1b0_0 jinja2-time 0.2.0 pyhd3eb1b0_3 jmespath 0.10.0 pyhd3eb1b0_0 joblib 1.1.0 pyhd3eb1b0_0 jpeg 9e h7f8727e_0 jq 1.6 h27cfd23_1000 json5 0.9.6 pyhd3eb1b0_0 jsonschema 4.4.0 py39h06a4308_0 jupyter 1.0.0 py39h06a4308_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39h06a4308_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 jxrlib 1.1 h7b6447c_2 keyring 23.4.0 py39h06a4308_0 kiwisolver 1.3.2 py39h295c915_0 krb5 1.19.2 hac12032_0 lazy-object-proxy 1.6.0 py39h27cfd23_0 lcms2 2.12 h3be6417_0 ld_impl_linux-64 2.35.1 h7274673_9 lerc 3.0 h295c915_0 libaec 1.0.4 he6710b0_1 libarchive 3.4.2 h62408e4_0 libcrc32c 1.1.1 he6710b0_2 libcurl 7.82.0 h0b77cf5_0 libdeflate 1.8 h7f8727e_5 libedit 3.1.20210910 h7f8727e_0 libev 4.33 h7f8727e_1 libffi 3.3 he6710b0_2 libgcc 7.2.0 h69d50b8_2 libgcc-ng 9.3.0 h5101ec6_17 libgfortran-ng 7.5.0 ha8ba4b0_17 libgfortran4 7.5.0 ha8ba4b0_17 libgomp 9.3.0 h5101ec6_17 libidn2 2.3.2 h7f8727e_0 liblief 0.11.5 h295c915_1 libllvm11 11.1.0 h3826bc1_1 libnghttp2 1.46.0 hce63b2e_0 libpng 1.6.37 hbc83047_0 libprotobuf 3.19.1 h4ff587b_0 libsodium 1.0.18 h7b6447c_0 libspatialindex 1.9.3 h2531618_0 libssh2 1.10.0 h8f2d780_0 libstdcxx-ng 9.3.0 hd4cf53a_17 libtiff 4.2.0 h85742a9_0 libunistring 0.9.10 h27cfd23_0 libuuid 1.0.3 h7f8727e_2 libwebp 1.2.2 h55f646e_0 libwebp-base 1.2.2 h7f8727e_0 libxcb 1.14 h7b6447c_0 libxml2 2.9.12 h03d6c58_0 libxslt 1.1.34 hc22bd24_0 libzopfli 1.0.3 he6710b0_0 llvmlite 0.38.0 py39h4ff587b_0 locket 0.2.1 py39h06a4308_2 lxml 4.8.0 py39h1f438cf_0 lz4-c 1.9.3 h295c915_1 lzo 2.10 h7b6447c_2 markdown 3.3.4 py39h06a4308_0 markupsafe 2.0.1 py39h27cfd23_0 matplotlib 3.5.1 py39h06a4308_1 matplotlib-base 3.5.1 py39ha18d171_1 matplotlib-inline 0.1.2 pyhd3eb1b0_2 mccabe 0.6.1 py39h06a4308_1 mistune 0.8.4 py39h27cfd23_1000 mkl 2021.4.0 h06a4308_640 mkl-service 2.4.0 py39h7f8727e_0 mkl_fft 1.3.1 py39hd3c417c_0 mkl_random 1.2.2 py39h51133e4_0 mock 4.0.3 pyhd3eb1b0_0 mpc 1.1.0 h10f8cd9_1 mpfr 4.0.2 hb69a4c5_1 mpi 1.0 mpich mpich 3.3.2 hc856adb_0 mpmath 1.2.1 py39h06a4308_0 msgpack-python 1.0.2 py39hff7bd54_1 multidict 5.2.0 py39h7f8727e_2 multipledispatch 0.6.0 py39h06a4308_0 munkres 1.1.4 py_0 mypy_extensions 0.4.3 py39h06a4308_1 navigator-updater 0.2.1 py39_1 nbclassic 0.3.5 pyhd3eb1b0_0 nbclient 0.5.13 py39h06a4308_0 nbconvert 6.4.4 py39h06a4308_0 nbformat 5.3.0 py39h06a4308_0 ncurses 6.3 h7f8727e_2 nest-asyncio 1.5.5 py39h06a4308_0 networkx 2.7.1 pyhd3eb1b0_0 nltk 3.7 pyhd3eb1b0_0 nodejs 6.11.2 h3db8ef7_0 nose 1.3.7 pyhd3eb1b0_1008 notebook 6.4.8 py39h06a4308_0 numba 0.55.1 py39h51133e4_0 numexpr 2.8.1 py39h6abb31d_0 numpy 1.21.5 py39he7a7128_1 numpy-base 1.21.5 py39hf524024_1 numpydoc 1.2 pyhd3eb1b0_0 olefile 0.46 pyhd3eb1b0_0 oniguruma 6.9.7.1 h27cfd23_0 openjpeg 2.4.0 h3ad879b_0 openpyxl 3.0.9 pyhd3eb1b0_0 openssl 1.1.1n h7f8727e_0 packaging 21.3 pyhd3eb1b0_0 pandas 1.4.2 py39h295c915_0 pandocfilters 1.5.0 pyhd3eb1b0_0 panel 0.13.0 py39h06a4308_0 param 1.12.0 pyhd3eb1b0_0 parsel 1.6.0 py39h06a4308_0 parso 0.8.3 pyhd3eb1b0_0 partd 1.2.0 pyhd3eb1b0_1 patchelf 0.13 h295c915_0 pathspec 0.7.0 py_0 patsy 0.5.2 py39h06a4308_1 pcre 8.45 h295c915_0 pep8 1.7.1 py39h06a4308_0 pexpect 4.8.0 pyhd3eb1b0_3 pickleshare 0.7.5 pyhd3eb1b0_1003 pillow 9.0.1 py39h22f2fdc_0 pip 21.2.4 py39h06a4308_0 pkginfo 1.8.2 pyhd3eb1b0_0 plotly 5.6.0 pyhd3eb1b0_0 pluggy 1.0.0 py39h06a4308_1 poyo 0.5.0 pyhd3eb1b0_0 prometheus_client 0.13.1 pyhd3eb1b0_0 prompt-toolkit 3.0.20 pyhd3eb1b0_0 prompt_toolkit 3.0.20 hd3eb1b0_0 protego 0.1.16 py_0 protobuf 3.19.1 py39h295c915_0 psutil 5.8.0 py39h27cfd23_1 ptyprocess 0.7.0 pyhd3eb1b0_2 pure_eval 0.2.2 pyhd3eb1b0_0 py 1.11.0 pyhd3eb1b0_0 py-lief 0.11.5 py39h295c915_1 pyasn1 0.4.8 pyhd3eb1b0_0 pyasn1-modules 0.2.8 py_0 pycodestyle 2.7.0 pyhd3eb1b0_0 pycosat 0.6.3 py39h27cfd23_0 pycparser 2.21 pyhd3eb1b0_0 pyct 0.4.6 py39h06a4308_0 pycurl 7.44.1 py39h8f2d780_1 pydispatcher 2.0.5 py39h06a4308_2 pydocstyle 6.1.1 pyhd3eb1b0_0 pyerfa 2.0.0 py39h27cfd23_0 pyflakes 2.3.1 pyhd3eb1b0_0 pygments 2.11.2 pyhd3eb1b0_0 pyhamcrest 2.0.2 pyhd3eb1b0_2 pyjwt 2.1.0 py39h06a4308_0 pylint 2.9.6 py39h06a4308_1 pyls-spyder 0.4.0 pyhd3eb1b0_0 pyodbc 4.0.32 py39h295c915_1 pyopenssl 21.0.0 pyhd3eb1b0_1 pyparsing 3.0.4 pyhd3eb1b0_0 pyqt 5.9.2 py39h2531618_6 pyrsistent 0.18.0 py39heee7806_0 pysocks 1.7.1 py39h06a4308_0 pytables 3.6.1 py39h77479fe_1 pytest 7.1.1 py39h06a4308_0 python 3.9.12 h12debd9_0 python-dateutil 2.8.2 pyhd3eb1b0_0 python-fastjsonschema 2.15.1 pyhd3eb1b0_0 python-libarchive-c 2.9 pyhd3eb1b0_1 python-lsp-black 1.0.0 pyhd3eb1b0_0 python-lsp-jsonrpc 1.0.0 pyhd3eb1b0_0 python-lsp-server 1.2.4 pyhd3eb1b0_0 python-slugify 5.0.2 pyhd3eb1b0_0 python-snappy 0.6.0 py39h2531618_3 pytz 2021.3 pyhd3eb1b0_0 pyviz_comms 2.0.2 pyhd3eb1b0_0 pywavelets 1.3.0 py39h7f8727e_0 pyxdg 0.27 pyhd3eb1b0_0 pyyaml 6.0 py39h7f8727e_1 pyzmq 22.3.0 py39h295c915_2 qdarkstyle 3.0.2 pyhd3eb1b0_0 qstylizer 0.1.10 pyhd3eb1b0_0 qt 5.9.7 h5867ecd_1 qtawesome 1.0.3 pyhd3eb1b0_0 qtconsole 5.3.0 pyhd3eb1b0_0 qtpy 2.0.1 pyhd3eb1b0_0 queuelib 1.5.0 py39h06a4308_0 readline 8.1.2 h7f8727e_1 regex 2022.3.15 py39h7f8727e_0 requests 2.27.1 pyhd3eb1b0_0 requests-file 1.5.1 pyhd3eb1b0_0 ripgrep 12.1.1 0 rope 0.22.0 pyhd3eb1b0_0 rsa 4.7.2 pyhd3eb1b0_1 rtree 0.9.7 py39h06a4308_1 ruamel_yaml 0.15.100 py39h27cfd23_0 s3transfer 0.5.0 pyhd3eb1b0_0 scikit-image 0.19.2 py39h51133e4_0 scikit-learn 1.0.2 py39h51133e4_1 scikit-learn-intelex 2021.5.0 py39h06a4308_0 scipy 1.7.3 py39hc147768_0 scrapy 2.6.1 py39h06a4308_0 seaborn 0.11.2 pyhd3eb1b0_0 secretstorage 3.3.1 py39h06a4308_0 send2trash 1.8.0 pyhd3eb1b0_1 service_identity 18.1.0 pyhd3eb1b0_1 setuptools 61.2.0 py39h06a4308_0 sip 4.19.13 py39h295c915_0 six 1.16.0 pyhd3eb1b0_1 smart_open 5.1.0 pyhd3eb1b0_0 snappy 1.1.9 h295c915_0 sniffio 1.2.0 py39h06a4308_1 snowballstemmer 2.2.0 pyhd3eb1b0_0 sortedcollections 2.1.0 pyhd3eb1b0_0 sortedcontainers 2.4.0 pyhd3eb1b0_0 soupsieve 2.3.1 pyhd3eb1b0_0 sphinx 4.4.0 pyhd3eb1b0_0 sphinxcontrib-applehelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-devhelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-htmlhelp 2.0.0 pyhd3eb1b0_0 sphinxcontrib-jsmath 1.0.1 pyhd3eb1b0_0 sphinxcontrib-qthelp 1.0.3 pyhd3eb1b0_0 sphinxcontrib-serializinghtml 1.1.5 pyhd3eb1b0_0 spyder 5.1.5 py39h06a4308_1 spyder-kernels 2.1.3 py39h06a4308_0 sqlalchemy 1.4.32 py39h7f8727e_0 sqlite 3.38.2 hc218d9a_0 stack_data 0.2.0 pyhd3eb1b0_0 statsmodels 0.13.2 py39h7f8727e_0 sympy 1.10.1 py39h06a4308_0 tabulate 0.8.9 py39h06a4308_0 tbb 2021.5.0 hd09550d_0 tbb4py 2021.5.0 py39hd09550d_0 tblib 1.7.0 pyhd3eb1b0_0 tenacity 8.0.1 py39h06a4308_0 terminado 0.13.1 py39h06a4308_0 testpath 0.5.0 pyhd3eb1b0_0 text-unidecode 1.3 pyhd3eb1b0_0 textdistance 4.2.1 pyhd3eb1b0_0 threadpoolctl 2.2.0 pyh0d69192_0 three-merge 0.1.1 pyhd3eb1b0_0 tifffile 2021.7.2 pyhd3eb1b0_2 tinycss 0.4 pyhd3eb1b0_1002 tk 8.6.11 h1ccaba5_0 tldextract 3.2.0 pyhd3eb1b0_0 toml 0.10.2 pyhd3eb1b0_0 tomli 1.2.2 pyhd3eb1b0_0 toolz 0.11.2 pyhd3eb1b0_0 tornado 6.1 py39h27cfd23_0 tqdm 4.64.0 py39h06a4308_0 traitlets 5.1.1 pyhd3eb1b0_0 twisted 22.2.0 py39h7f8727e_0 typed-ast 1.4.3 py39h7f8727e_1 typing-extensions 4.1.1 hd3eb1b0_0 typing_extensions 4.1.1 pyh06a4308_0 tzdata 2022a hda174b7_0 ujson 5.1.0 py39h295c915_0 unidecode 1.2.0 pyhd3eb1b0_0 unixodbc 2.3.9 h7b6447c_0 urllib3 1.26.9 py39h06a4308_0 w3lib 1.21.0 pyhd3eb1b0_0 watchdog 2.1.6 py39h06a4308_0 wcwidth 0.2.5 pyhd3eb1b0_0 webencodings 0.5.1 py39h06a4308_1 websocket-client 0.58.0 py39h06a4308_4 werkzeug 2.0.3 pyhd3eb1b0_0 wget 1.21.3 h0b77cf5_0 wheel 0.37.1 pyhd3eb1b0_0 widgetsnbextension 3.5.2 py39h06a4308_0 wrapt 1.12.1 py39he8ac12f_1 wurlitzer 3.0.2 py39h06a4308_0 xarray 0.20.1 pyhd3eb1b0_1 xlrd 2.0.1 pyhd3eb1b0_0 xlsxwriter 3.0.3 pyhd3eb1b0_0 xz 5.2.5 h7b6447c_0 yaml 0.2.5 h7b6447c_0 yapf 0.31.0 pyhd3eb1b0_0 yarl 1.6.3 py39h27cfd23_0 zeromq 4.3.4 h2531618_0 zfp 0.5.5 h295c915_6 zict 2.0.0 pyhd3eb1b0_0 zipp 3.7.0 pyhd3eb1b0_0 zlib 1.2.12 h7f8727e_2 zope 1.0 py39h06a4308_1 zope.interface 5.4.0 py39h7f8727e_0 zstd 1.4.9 haebb681_0 Conda Check jupyter 1.0.0 py39h06a4308_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39h06a4308_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 . echo Conda Check # test for a kernel installation test=&quot;jupyter&quot; # keyword check=`conda list | grep $test` # run command n=${#check} # determine length if [[ ${n} &gt; 0 ]]; # testt length then # greater than zero echo &quot;$check&quot; else # less than zero echo &quot;$test not found&quot; fi . Conda Check jupyter 1.0.0 py39h06a4308_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39h06a4308_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 . Jupyter Checks . jupyter --version jupyter kernelspec list . Selected Jupyter core packages... IPython : 8.4.0 ipykernel : 6.15.1 ipywidgets : not installed jupyter_client : 7.3.4 jupyter_core : 4.11.1 jupyter_server : not installed jupyterlab : not installed nbclient : not installed nbconvert : not installed nbformat : not installed notebook : not installed qtconsole : not installed traitlets : 5.3.0 Available kernels: bash /home/kaiden_do/.local/share/jupyter/kernels/bash javascript /home/kaiden_do/.local/share/jupyter/kernels/javascript python3 /home/kaiden_do/.local/share/jupyter/kernels/python3 . test=&quot;python3&quot; # keyword check=`jupyter kernelspec list | grep $test` # run command n=${#check} # determine length if [[ ${n} &gt; 0 ]]; # testt length then # greater than zero echo &quot;$check&quot; else # less than zero echo &quot;$test not found&quot; fi . python3 /home/kaiden_do/.local/share/jupyter/kernels/python3 .",
            "url": "https://kaiden-dough.github.io/fastpages/bash/2022/08/27/bashtoolcheck.html",
            "relUrl": "/bash/2022/08/27/bashtoolcheck.html",
            "date": " • Aug 27, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "Python Quiz and Hacks",
            "content": "My Quiz . This quiz defines two functions for asking questions and receiving an answer. The quiz has 7 questions. Each question asked is compared to a correct answer and if they are equal (with no regard to case) then the quiz tells the user. If not, then the quiz tells the user that the answer is wrong. The program stores each correct answer and tells the user the percentage of correct answers at the end of the quiz. . import getpass, sys # imports functions and libraries def question_and_answer(prompt): # defines the question_and_answer function print(&quot;Question: &quot; + prompt) # asks the user a question msg = input() # takes the user&#39;s input print(&quot;Answer: &quot; + msg) # prints the answer and the user&#39;s input def question_with_response(prompt): # defines the question_with_response function print(&quot;Question: &quot; + prompt) # asks the user a question msg = input() # takes the user&#39;s input return msg # the function returns the user&#39;s response as a string value questions = 7 # number of questions in the quiz correct = 0 # amount correct in the beginning of the quiz print(&#39;Hello, &#39; + getpass.getuser() + &quot; running &quot; + sys.executable) # greets the user print(&quot;You will be asked &quot; + str(questions) + &quot; questions.&quot;) # tells the user how many questions are in the quiz question_and_answer(&quot;Are you ready to take a test?&quot;) # prompts the user to start the quiz rsp = question_with_response(&quot;What command is used to include other functions that were previously developed?&quot;) # asks question and stores the user&#39;s response if rsp.lower() == &quot;import&quot;: # compares the user&#39;s response to the answer without regard to the case print(rsp + &quot; is correct!&quot;) # shows that it is correct correct += 1 # one more correct answer else: # if not correct print(rsp + &quot; is incorrect!&quot;) # shows that it is incorrect rsp = question_with_response(&quot;What command is used to evaluate correct or incorrect response in this example?&quot;) # asks question and stores the user&#39;s response if rsp.lower() == &quot;if&quot;: # compares the user&#39;s response to the answer without regard to the case print(rsp + &quot; is correct!&quot;) # shows that it is correct correct += 1 # one more correct answer else: # if not correct print(rsp + &quot; is incorrect!&quot;) # shows that it is incorrect rsp = question_with_response(&quot;Each &#39;if&#39; command contains an &#39;_________&#39; to determine a true or false condition?&quot;) # asks question and stores the user&#39;s response if rsp.lower() == &quot;expression&quot;: # compares the user&#39;s response to the answer without regard to the case print(rsp + &quot; is correct!&quot;) # shows that it is correct correct += 1 # one more correct answer else: # if not correct print(rsp + &quot; is incorrect!&quot;) # shows that it is incorrect rsp = question_with_response(&quot;What does &#39;def&#39; do in Python in relation to a function: It _______ the function?&quot;) # asks question and stores the user&#39;s response if rsp.lower() == &quot;defines&quot;: # compares the user&#39;s response to the answer without regard to the case print(rsp + &quot; is correct!&quot;) # shows that it is correct correct += 1 # one more correct answer else: # if not correct print(rsp + &quot; is incorrect!&quot;) # shows that it is incorrect rsp = question_with_response(&quot;What does the function take as a parameter?&quot;) # asks question and stores the user&#39;s response if rsp.lower() == &quot;prompt&quot;: # compares the user&#39;s response to the answer without regard to the case print(rsp + &quot; is correct!&quot;) # shows that it is correct correct += 1 # one more correct answer else: # if not correct print(rsp + &quot; is incorrect!&quot;) # shows that it is incorrect rsp = question_with_response(&quot;Can static text change?&quot;) # asks question and stores the user&#39;s response if rsp.lower() == &quot;no&quot;: # compares the user&#39;s response to the answer without regard to the case print(rsp + &quot; is correct!&quot;) # shows that it is correct correct += 1 # one more correct answer else: # if not correct print(rsp + &quot; is incorrect!&quot;) # shows that it is incorrect rsp = question_with_response(&quot;What is the first thing that beginner programmers usually print?&quot;) # asks question and stores the user&#39;s response if rsp.lower() == &quot;hello world&quot;: # compares the user&#39;s response to the answer without regard to the case print(rsp + &quot; is correct!&quot;) # shows that it is correct correct += 1 # one more correct answer else: # if not correct print(rsp + &quot; is incorrect!&quot;) # shows that it is incorrect print(getpass.getuser() + &quot; you scored &quot; + str(correct) +&quot;/&quot; + str(questions)+&quot; or &quot;+str((correct/questions)*100)+&quot;%&quot;) # tells the user how many questions they got correct out of the total questions and their score . Hello, kaiden_do running /bin/python3 You will be asked 7 questions. Question: Are you ready to take a test? Answer: yes Question: What command is used to include other functions that were previously developed? import is correct! Question: What command is used to evaluate correct or incorrect response in this example? d is incorrect! Question: Each &#39;if&#39; command contains an &#39;_________&#39; to determine a true or false condition? d is incorrect! Question: What does &#39;def&#39; do in Python in relation to a function: It _______ the function? d is incorrect! Question: What does the function take as a parameter? d is incorrect! Question: Can static text change? d is incorrect! Question: What is the first thing that beginner programmers usually print? d is incorrect! kaiden_do you scored 1/7 or 14.285714285714285% .",
            "url": "https://kaiden-dough.github.io/fastpages/python/2022/08/26/Python-Hacks.html",
            "relUrl": "/python/2022/08/26/Python-Hacks.html",
            "date": " • Aug 26, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "Del Norte High School",
            "content": "Del Norte High School . . Location . 16601 Nighthawk Ln, San Diego, CA 92127 . Description . Del Norte High School is a public high school in San Diego. It primarily serves the 4S Ranch and Del Sur communities of San Diego, California. It is a part of the Poway Unified School District and was established in 2008. . Academics . Del Norte High School offers a range of classes: classes for college requirements, many electives, and rigorous AP classes. . Athletics . The Nighthawks has many sports for students to play. A few are track and field, football, basketball, soccer, volleyball, tennis, swimming, and lacrosse. . Clubs . Del Norte also offers many clubs for students to join or to create. For example there is the Del Norte FRC robotics team, Team Optix. Also another club is Key Club, where club members volunteer in community service opportunities. .",
            "url": "https://kaiden-dough.github.io/fastpages/markdown/dnhs/2022/08/25/delnortehighschool.html",
            "relUrl": "/markdown/dnhs/2022/08/25/delnortehighschool.html",
            "date": " • Aug 25, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "Apel Syllabus",
            "content": "Mrs. Darcey Hall Room G115 Email: mdarceyhall@powayusd.com . I. General Description . With an emphasis on critical reading and persuasive writing, AP Language allows students to experience the rigor of a college-level course while still in high school. Specifically, the class focuses on the study of rhetoric, the art of effective communication. Students will have numerous opportunities to analyze the strategies of accomplished writers so that they can improve their own abilities to communicate effectively. Additionally, the course sets students up to earn college credit. College credit may be granted based upon earning a passing score on College Board’s AP English Language exam in May, and all students are expected to take this exam. Like college preparatory courses at the high school level, this class will also emphasize the refinement of reading and writing skills. . A. Composition . According to The College Board, the non-profit organization that nationally organizes advanced placement courses, AP Language aims to “engage students in becoming skilled writers who compose for a variety of purposes.” Additionally, The College Board intends that the course “makes students aware of the interactions among a writer’s purposes, audience expectations, and subjects as well as the way generic conventions and the resources of language contribute to effectiveness in writing.” AP Language students will develop an understanding of writing as a process, and students will be asked to write numerous timed in-class and polished essays. Since this is a composition course, students should expect to and be prepared to write either type of these essays every 14-21 days. Essentially, this course will refine a student’s ability to write using effective diction, controlling tone, illustrative detail, logical organization, and a variety of sentence structures. . B. Critical Reading . Since there is an inherent connection between reading and writing, this AP course will also develop the student’s ability to read critically and analyze fine nuances of meanings. The College Board proposes that students become “skilled readers of prose written in a variety of periods, disciplines, and rhetorical contexts.” Furthermore, students are expected to read “a wide variety of prose styles from many disciplines and historical time periods to gain understanding of the connections between interpretative skill in reading and writing.” Additionally, students will have the opportunity to select their own reading materials; this can include novels, nonfiction books, or news magazines. . II. Course Assignments, Materials and Communication . Students are expected to take notes on all course lectures and class discussions; often these notes will take the form of handouts provided by the teacher. Course assignments will include, but are not limited to: the reading of novels, essays and other prose; reading quizzes; close reading questions; practice AP exams; activities from AP Classroom; vocabulary development; individual and group projects; writing essays; peer review activities; conducting research; sentence building activities; independent reading; and posting to class discussion boards. Additionally, students should expect to complete a research paper that spans the trimesters. . Students are also expected to keep a class notebook. On an almost daily basis, students will complete work in this notebook. This way, students always have their course notes and work to review before assessments, major assignments and in class essays. Students should value the work they add to their notebooks; it represents their commitment to the learning process. Additionally, this work will comprise a good majority of the class work/homework grading category. . Canvas will be the main learning platform. From the home page, students can find announcements and reminders, a commonly asked questions Discussion Board, and, most importantly, weekly learning modules. From my Canvas homepage, students can find a link to access these modules under Weekly Agendas. Additionally, there will be a page for each day of the school week that includes all the links, materials and resources for the day’s lesson. . Email will always be the best way to contact the teacher. If a student has a general question about an assignment or lesson, they can post it to the APEL Questions Discussion Board. This board will always be at the top of the Discussion Board page and should be used for questions and answers that benefit the whole class. Often, multiple students have the same question, and this allows the teacher to provide answers that are accessible to everyone. . # . III. Classroom Policies . A. Submitting Work . Please treat deadlines with the utmost seriousness. A missed deadline often means that a student will not be prepared for the next step in a series of lessons. It is very important that students note the specific due date and time for each assignment. These due dates and times will always be clearly noted and communicated. In general, all work done outside the classroom must be typed and follow all MLA guidelines. . Submitting writing assignments will also include submitting to www.turnitin.com. Turnitin.com is a program that protects against plagiarism. All assignments should reflect each student’s own work; students should not collaborate on assignments unless specific instructions are otherwise given. It is very important that every student personally study PUSD’s academic honesty policy. This policy is also fully covered in the DNHS student handbook. The expectation is that students understand this policy because it will be strictly enforced! If a student EVER has a question about what is acceptable or unacceptable, they should always ask. . B. Hate Behavior and Trigger Warning . Every student has the right to feel safe and valued on our campus and in the AP English Language Classroom. We are striving to actively stand against racism of any kind and to be accepting of those regardless of their race, ethnicity, gender identity, sexual orientation, and religious affiliation. This classroom, and our school, is a place where insensitive and prejudiced behavior will not be tolerated. The PUSD/DNHS discipline policy in regard to hate/racist behavior is linked here. To learn more about Del Norte’s commitment to equity and inclusion and to find a form for reporting anything that violates this commitment, please visit this site. . Additionally, as a humanities course, the course may broach topics of a sensitive nature. Our classroom provides an open space for the critical and civil exchange of ideas. Diverse viewpoints are welcome. Some readings and other content may include sensitive language or topics that some students may find uncomfortable. If a student has a specific area of concern or sensitivity, they should alert the teacher as soon as possible. We ask all students to help create an atmosphere of mutual respect and sensitivity. Again, please know that our intentions are always to create a safe place for students to grapple with complex and multifaceted issues. . C. Late and Make-up Work . Students will receive at least 48 hours, often more, notice prior to a deadline or due date, so students are expected to submit all work on time. Absences do not create extensions. However, if a student ever finds a due date is impossible to meet, please contact the teacher to request a possible extension. We understand that students all have busy lives and demanding academic schedules. We respect this; nevertheless, we do expect students to take initiative to request a possible extension if they ever need one. A request must be submitted at least 24 hours prior to the deadline. Remember, this is a college level course, and students must be responsible for managing their work. Requests for extensions will be tracked, and if a student habitually makes this request, a parent/student/teacher conference may occur to help find a solution. Additionally, each student is allowed one amnesty pass for the yearlong course. Choosing to use the amnesty pass means that a student can submit an assignment the next day that follows the original due date (even if this falls on a non-school day). Students may use their pass on any assignment, but records will be kept, so please remember that this is a one time pass for the entire school year. Late work should not be an issue because students have other options. If a student is irresponsible, there will be consequences and penalties. Please problem solve and find a way to get work to the teacher on time. Remember: communication with the teacher is key to a student’s success. Any tests missed due to an excused absence should be made up within one week of the absence unless specific accommodations have been made. . We will take attendance daily. If a student is absent, they are still responsible for the day’s learning. Absent students should consult the daily agenda from the weekly learning module and review all the posted instructional materials. Please make every effort to attend class when an on demand essay is scheduled. If a student has an excused absence, the student will write the essay during the next class session they attend. . Please make sure that you check your Canvas inbox on a daily basis. Students can access this inbox from the gray toolbar on the left side of Canvas/MyConnect. Sometimes, the teacher might have a specific message for a student, and this will be the best form of contact. We expect students to check this inbox every school day. . D. Grading . Assignments are weighted by their purpose. Work designed to introduce or practice skills, that is work designed to help you form and master course skills (formative work) is worth 25% of your final grade. Summative work, work like tests and essays that are designed to measure your learning progress, is worth the remaining 75% (60% for essays and 15% for tests). . Grades will be based on the following scale: . 100-90%=A; 89-80%=B; 79-70%=C; 69-60%=D . Grades can be accessed through Synergy and Canvas. Please note that the English department’s grading policies do not allow for grade rounding; exceptions will not be made. Please note that the Synergy gradebook is the accurate record. Students can see grades in Canvas, but they might not always configure to meet the class weighting and expectations listed above. Final grades will be based on Synergy’s record, NOT the Canvas gradebook. . E. Expectations and Routine Procedures . In addition to the expectations and procedures explained above, students are expected to: . Take responsibility for learning. . | Treat everyone with respect–all aspects of the PUSD’s Hate/Racist Behavior Policy will be enforced. . | Turn in all work on time . | Be prepared everyday with the required materials and attitude . | Have academic honesty . | Attend tutorial when asked or as the student feels necessary . | . F. Citizenship . Citizenship in this class calls for the highest possible standards of respect for yourself, others, property and the learning process. All school and district policies, including the academic honesty policy, will be strictly enforced. Earning an “O” in citizenship will require you to go beyond being on time and undisruptive. Students earning an “O” in citizenship positively contribute to the learning environment by being generous, supportive, respectful, helpful and active participants in our learning community. Requests for college letters of recommendation from students who do not earn an “O” in citizenship on final trimester report cards will be denied. . I commend you for accepting the challenge of an AP course. I look forward to a rewarding, educational and fun year! .",
            "url": "https://kaiden-dough.github.io/fastpages/2022/08/25/APEL-syllabus.html",
            "relUrl": "/2022/08/25/APEL-syllabus.html",
            "date": " • Aug 25, 2022"
        }
        
    
  
    
        ,"post7": {
            "title": "Kaiden's Markdown Post",
            "content": "HELLO . My first Markdown Post on my FastPages site. . I am Kaiden Do. I am a junior at Del Norte High School. Follow my GitHub 1 . Things I Like . Fruits Animals . Mangos | Turtles | . Oranges | Bears | . . Code Things . print(&quot;I am:&quot;) age = 15 print(age) . That is all :) . Penguin . . Footnote . My GitHub page. &#8617; . |",
            "url": "https://kaiden-dough.github.io/fastpages/markdown/2022/08/21/myfirstmarkdownpost.html",
            "relUrl": "/markdown/2022/08/21/myfirstmarkdownpost.html",
            "date": " • Aug 21, 2022"
        }
        
    
  
    
        ,"post8": {
            "title": "First Jupyter Notebook Post",
            "content": "Code Notebook . Some Python code: . print(&quot;Hello&quot;) . Hello . for i in range (3): print(&quot;HEY!&quot;, end = &#39; &#39;) for i in range (3): print(&quot;CODE!&quot;, end = &#39; &#39;) . HEY! HEY! HEY! CODE! CODE! CODE! .",
            "url": "https://kaiden-dough.github.io/fastpages/jupyter/2022/08/21/firstjupyternotebook.html",
            "relUrl": "/jupyter/2022/08/21/firstjupyternotebook.html",
            "date": " • Aug 21, 2022"
        }
        
    
  
    
        ,"post9": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://kaiden-dough.github.io/fastpages/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post10": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://kaiden-dough.github.io/fastpages/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  

  
      ,"page2": {
          "title": "Notes for APCSP",
          "content": "Notes and Terms and Ideas . import: includes other functions that were previously developed | if: evaluates if something meets a requirement | expression: the condtion that must be met in the if statment | def in Python: defines a function | prompt: what the function takes as a parameter | static: something that does not change | REMEMBER to Code/Code/Code | … | .",
          "url": "https://kaiden-dough.github.io/fastpages/_pages/02_notes.html",
          "relUrl": "/_pages/02_notes.html",
          "date": ""
      }
      
  

  
      ,"page3": {
          "title": "About Me",
          "content": "I am Kaiden Do and I am a junior in Del Norte High School. Follow me on GitHub: kaiden-dough 1. . My GitHub profile. &#8617; . |",
          "url": "https://kaiden-dough.github.io/fastpages/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  

  
  

  
  

  
  

  
  

  
  

  
      ,"page11": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://kaiden-dough.github.io/fastpages/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}