<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="https://kaiden-dough.github.io/fastpages/feed.xml" rel="self" type="application/atom+xml" /><link href="https://kaiden-dough.github.io/fastpages/" rel="alternate" type="text/html" /><updated>2022-12-16T02:15:36-06:00</updated><id>https://kaiden-dough.github.io/fastpages/feed.xml</id><title type="html">Kaiden Do FastPages</title><subtitle>Kaiden's FastPages site!</subtitle><entry><title type="html">Week 16 Review Ticket</title><link href="https://kaiden-dough.github.io/fastpages/markdown/week16/2022/12/15/week16reviewticket.html" rel="alternate" type="text/html" title="Week 16 Review Ticket" /><published>2022-12-15T00:00:00-06:00</published><updated>2022-12-15T00:00:00-06:00</updated><id>https://kaiden-dough.github.io/fastpages/markdown/week16/2022/12/15/week16reviewticket</id><author><name>Kaiden Do</name></author><category term="markdown" /><category term="week16" /><summary type="html"><![CDATA[Lesson Grade Hacks 3.9 &amp; 3.11 0.99/1.00 Hack 3.12 &amp; 3.13 Our Lesson Our Lesson 3.14 &amp; 3.15 0.90/1.00 Hack TOTAL 1.89/2.00  ]]></summary></entry><entry><title type="html">College Board Vocab</title><link href="https://kaiden-dough.github.io/fastpages/markdown/week16/2022/12/15/vocab.html" rel="alternate" type="text/html" title="College Board Vocab" /><published>2022-12-15T00:00:00-06:00</published><updated>2022-12-15T00:00:00-06:00</updated><id>https://kaiden-dough.github.io/fastpages/markdown/week16/2022/12/15/vocab</id><author><name>Kaiden Do</name></author><category term="markdown" /><category term="week16" /><summary type="html"><![CDATA[Unit 2… Binary/Data Terms Bits, Bytes, Hexadecimal / Nibbles: Bits: the smallest unit of data in a computer, used to represent a boolean value Bytes: unit of data that is typically made up of 8 bits, used to represent a single character or symbol in a computer’s memory Hexadecimal: a numeral system that uses base 16, used in computing as a way to represent binary data in a more compact and human-readable form Nibbles: a unit of data that is made up of 4 bits, used to represent a single hexadecimal digit Binary Numbers: Unsigned Integer, Signed Integer, Floating Point: Unsigned Integer: a positive whole number that can range from 0 to infinity that is determined by the number of bits used to represent the integer Signed Integer: can represent both positive and negative whole numbers Floating Point: a data type that represents a decimal number Binary Data Abstractions: Boolean, ASCII, Unicode, RGB: Boolean: a data type that has only two possible values, true or false ASCII: a standardized character encoding that represents letters, numbers, and other symbols in computers; represent text in computers Unicode: a standardized character encoding that represents most of the world’s written languages; includes ASCII and many other characters from different scripts and languages RGB: a color model used to represent colors in devices; combination of these three colors in different proportions creates a wide range of colors Data Compression: Lossy, Lossless: Lossy: involves discarding some of the data in the original file in order to reduce its size; used for audio, video, and image files, where some loss of quality is acceptable in exchange for a smaller file size Lossless: involves encoding the data in such a way that all of the original information can be recovered when the file is decompressed; used for text, software, and other types of data where it is important to preserve all of the original information Unit 3… Algorithm/Programming Terms Variables, Data Types, Assignment Operators: Variables: used to store and manipulate data in a program x = 10 Data Types: classification of data based on the type of value it can hold; include integers, floating-point numbers, characters, and strings x = 10 y = "Hello" Nums = [1,3,4,6] Assignment Operators: a symbol that is used to assign a value to a variable (=) Managing Complexity with Variables: Lists, 2D Lists, Dictionaries, Class: Lists: an ordered collection of items with square brackets ([]) my_list = [1, 2, 3, 4, 5] mixed = [1, 'hello', 3.14, True] words = ['apple', 'banana', 'cherry'] 2D Lists: also called a matrix, a list of lists matrix = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]] Dictionaries: collection of key-value pairs, uses curly braces ({}) dictionary = {'one': 1, 'two': 2, 'three': 3} Class: a blueprint for creating objects, they have member variables and have behavior associated with them Algorithms, Sequence, Selection, Iteration: Algorithms: a set of steps or instructions that are followed to solve a problem or perform a task Sequences: executes a series of steps in a specific order print(x) print(y) print("Hi") Selection: executes one or more steps based on a specific condition if x &gt; 0: print("x is positive") elif x &lt; 0: print("x is negative") else: print("x is 0") Iteration: executes one or more steps repeatedly until a certain condition is met x = 10 while x &gt; 0: print(x) x -= 1 Expressions, Comparison Operators, Booleans Expressions and Selection, Booleans Expressions and Iteration, Truth Tables: Expressions: combination of values, variables, and operators that results in a single value Comparison Operators: compare values and determine if they are equal, greater than, or less than each other ”==”: equal to ”!=”: not equal to ”&gt;”: greater than ”&lt;”: less than ”&gt;=”: greater than or equal to ”&lt;=”: less than or equal to x = 4 y = 5 print(x == y) print(x != y) print(x &gt; y) print(x &lt; y) print(x &gt;= y) print(x &lt;= y) Boolean Expressions and Selection: a boolean variable (True/False) can be used as conditions in selection (if statements) Boolean Expressions and Iteration: iteration (while loops) can use a boolean variable as a condition(if statements) Truth Tables: A table for a logical operator containing each variable and all possible input and output results of that operator AND: all inputs must return true OR: one input must return true XOR: only one input can be true Characters, Strings, Length, Concatenation, Upper, Lower, Traversing Strings: Characters: a single letter, number, symbol, or other element Strings: sequence of characters name = "Kaiden" Length: number of characters it contains name = "Kaiden" print(len(name)) Concatenation: combining two or more strings into a single string name = "Kaiden" lastName = "Do" concatenated = name + " " + lastName Upper: convert a string to all uppercase name = "Kaiden" print(name.upper()) Lower: convert a string to all lowercase name = "Kaiden" print(name.lower()) Traversing Strings: to access each character in the string one by one, use a for loop to do this name = "Kaiden" for x in name: print(x) Python If, Elif, Else conditionals; Nested Selection Statements: Python If: execute a block of code if a specific condition is true if x &gt; 0: print("Hi") Elif: to specify additional conditions to check if the previous conditions are false if x &gt; 0: print("Hi") elif x &gt; -10: print("Bye") Else conditionals: execute a block of code if all of the previous conditions are false if x &gt; 0: print("Hi") elif x &gt; -10: print("Bye") else: print("NO NO NO") Nested Selection Statements: control structures that contain other control structures within them if x &gt; 0: if b &gt; 0: print("x and b are positive") Python For, While loops with Range, with List: Python For: used to execute a block of code multiple times for i in range(1, 6): print(i) While loops with Range: execute a block of code repeatedly until a certain condition is met x = 0 while x &lt;= 5: print(x) x += 1 with List: x = [4,3,5,2,1] i = 0 while i &lt;= len(x): print(x[i]) i += 1 Combining loops with conditionals to Break, Continue: Combining loops with conditionals to Break: break is used to exit a loop early Continue: used to skip the rest of the current iteration and move on to the next one while y &gt; 0: if x == 0: break if x == 3: continue Procedural Abstraction, Python Def procedures, Parameters, Return Values: Procedural Abstraction: abstract away the details of how the task is performed, making your code easier to read and maintain, more efficient code Python Def procedures: how procedures are made with the def word def Greeting(name): print("Hello", name) Greeting("Kaiden") Parameters: values that are passed to the procedure when it is called, defined within the parentheses of the procedure definition def Sum(x,y): print(x+y) Sum(6,8) Return Values: value that is returned can be used by the calling code to perform additional tasks or to assign to a variable def subtract(x,y): diff = x - y return diff print(subtract(5,2))]]></summary></entry><entry><title type="html">Week 16 Vocab</title><link href="https://kaiden-dough.github.io/fastpages/markdown/week16/2022/12/15/CompliedWeek16Vocab.html" rel="alternate" type="text/html" title="Week 16 Vocab" /><published>2022-12-15T00:00:00-06:00</published><updated>2022-12-15T00:00:00-06:00</updated><id>https://kaiden-dough.github.io/fastpages/markdown/week16/2022/12/15/CompliedWeek16Vocab</id><author><name>Kaiden Do</name></author><category term="markdown" /><category term="week16" /><summary type="html"><![CDATA[3.14 Documentation: Text that explains the what, how, or why of your code]]></summary></entry><entry><title type="html">Unit 3.17 &amp;amp; 3.18 Hacks</title><link href="https://kaiden-dough.github.io/fastpages/jupyter/week16/2022/12/14/Unit_3.17_3.18_HACKS.html" rel="alternate" type="text/html" title="Unit 3.17 &amp;amp; 3.18 Hacks" /><published>2022-12-14T00:00:00-06:00</published><updated>2022-12-14T00:00:00-06:00</updated><id>https://kaiden-dough.github.io/fastpages/jupyter/week16/2022/12/14/Unit_3.17_3.18_HACKS</id><author><name>Kaiden Do</name></author><category term="jupyter" /><category term="week16" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Unit 3.16 Hacks</title><link href="https://kaiden-dough.github.io/fastpages/jupyter/week16/2022/12/13/Unit_3.16_HACKS.html" rel="alternate" type="text/html" title="Unit 3.16 Hacks" /><published>2022-12-13T00:00:00-06:00</published><updated>2022-12-13T00:00:00-06:00</updated><id>https://kaiden-dough.github.io/fastpages/jupyter/week16/2022/12/13/Unit_3.16_HACKS</id><author><name>Kaiden Do</name></author><category term="jupyter" /><category term="week16" /><summary type="html"><![CDATA[]]></summary></entry></feed>